{"version":3,"file":"static/js/318.1199fef4.chunk.js","mappings":"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","sources":["views/algo/Algo.js","views/widgets/WidgetsDropdown.js"],"sourcesContent":["/* eslint-disable */\nimport React from 'react'\nimport { useEffect, useState } from 'react'\n\nimport {\n  CCard,\n  CCardBody,\n  CCol,\n  CRow,\n} from '@coreui/react'\nimport { CChartLine, CChart } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\nimport WidgetsDropdown from '../widgets/WidgetsDropdown'\n\nimport axios from 'axios'\n\nconst Algo = () => {\n  const algo_name = \"buy_and_hold_google\"\n  const [portfolioData, setPortfolio] = useState([])\n  const [portfolioStatusData, setPortfolioStatus] = useState([])\n\n  useEffect(() => {\n    axios\n      .get('api/portfolio/history/'+algo_name)\n      .then(response => {              \n      setPortfolio(response.data)\n\n      const portfolioStatusData = \n        {\n          date: response.data.slice(-1)[0].date,\n          apr: response.data.slice(-1)[0].algo.apr,\n          sharpe: response.data.slice(-1)[0].algo.sharpe,\n          mdd: response.data.slice(-1)[0].algo.mdd\n        }\n      setPortfolioStatus(portfolioStatusData)\n      })\n\n  },[])\n\n  return (\n    <>\n        <CRow>\n          <CCol >\n            <h1>\n              {algo_name}\n            </h1>\n            </CCol>\n        </CRow>\n      <WidgetsDropdown data = {portfolioStatusData}/>\n      <CCard className=\"mb-4\">\n        <CCardBody>\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"return\" className=\"card-title mb-0\">\n                Cumulative Return\n              </h4>\n              <div className=\"small text-medium-emphasis\">March 2019 - March 2023</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n            </CCol>\n          </CRow>\n          <CChartLine\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: portfolioData.map(data=>(data.date.substring(0, 10))),\n              \n              datasets: [\n                {\n                  label: algo_name,\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: portfolioData.map(data=>(data.algo.cum_ret)),\n                  fill: true,\n                },\n                \n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n          <CRow>\n            <CCol sm={5}>\n              <h4 id=\"traffic\" className=\"card-title mb-0\">\n                Position\n              </h4>\n              <div className=\"small text-medium-emphasis\">March 2019 - March 2023</div>\n            </CCol>\n            <CCol sm={7} className=\"d-none d-md-block\">\n            </CCol>\n          </CRow>\n          <CChart\n            type=\"line\"\n            style={{ height: '300px', marginTop: '40px' }}\n            data={{\n              labels: portfolioData.map(data=>(data.date.substring(0, 10))),\n              \n              datasets: [\n                {\n                  label: algo_name,\n                  backgroundColor: hexToRgba(getStyle('--cui-info'), 10),\n                  borderColor: getStyle('--cui-info'),\n                  pointHoverBackgroundColor: getStyle('--cui-info'),\n                  borderWidth: 2,\n                  data: portfolioData.map(data=>(data.algo.position)),\n                  fill: true,\n                },\n                \n              ],\n            }}\n            options={{\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false,\n                },\n              },\n              scales: {\n                x: {\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n                y: {\n                  ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(250 / 5),\n                    max: 250,\n                  },\n                },\n              },\n              elements: {\n                line: {\n                  tension: 0.4,\n                },\n                point: {\n                  radius: 0,\n                  hitRadius: 10,\n                  hoverRadius: 4,\n                  hoverBorderWidth: 3,\n                },\n              },\n            }}\n          />\n        </CCardBody>\n       \n      </CCard>\n  \n    </>\n  )\n}\n\nexport default Algo\n  /* eslint-disable */","/* eslint-disable */\nimport React from 'react'\nimport {\n  CRow,\n  CCol,\n  CWidgetStatsA,\n} from '@coreui/react'\nimport { getStyle } from '@coreui/utils'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst WidgetsDropdown = ({data}) => {\n \n  return (\n    <CRow>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"primary\"\n          value={\n            <>\n              {data[\"apr\"]}\n            </>\n          }\n          title=\"APR\"\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-primary'),\n                    data: [65, 59, 84, 84, 51, 55, 40],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: 30,\n                    max: 89,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"info\"\n          value={\n            <>\n              {data[\"sharpe\"]}           \n            </>\n          }\n          title=\"Sharpe Ratio\"\n          chart={\n            <CChartLine\n              className=\"mt-3 mx-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'transparent',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    pointBackgroundColor: getStyle('--cui-info'),\n                    data: [1, 18, 9, 17, 34, 22, 11],\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    grid: {\n                      display: false,\n                      drawBorder: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                  y: {\n                    min: -9,\n                    max: 39,\n                    display: false,\n                    grid: {\n                      display: false,\n                    },\n                    ticks: {\n                      display: false,\n                    },\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 1,\n                  },\n                  point: {\n                    radius: 4,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n        <CWidgetStatsA\n          className=\"mb-4\"\n          color=\"warning\"\n          value={\n            <>\n              {data[\"mdd\"]}           \n            </>\n          }\n          title=\"Maximum Drawdown\"\n          chart={\n            <CChartLine\n              className=\"mt-3\"\n              style={{ height: '70px' }}\n              data={{\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [\n                  {\n                    label: 'My First dataset',\n                    backgroundColor: 'rgba(255,255,255,.2)',\n                    borderColor: 'rgba(255,255,255,.55)',\n                    data: [78, 81, 80, 45, 34, 12, 40],\n                    fill: true,\n                  },\n                ],\n              }}\n              options={{\n                plugins: {\n                  legend: {\n                    display: false,\n                  },\n                },\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    display: false,\n                  },\n                  y: {\n                    display: false,\n                  },\n                },\n                elements: {\n                  line: {\n                    borderWidth: 2,\n                    tension: 0.4,\n                  },\n                  point: {\n                    radius: 0,\n                    hitRadius: 10,\n                    hoverRadius: 4,\n                  },\n                },\n              }}\n            />\n          }\n        />\n      </CCol>\n      <CCol sm={6} lg={3}>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n/* eslint-disable */"],"names":["algo_name","_useState","useState","_useState2","_slicedToArray","portfolioData","setPortfolio","_useState3","_useState4","portfolioStatusData","setPortfolioStatus","useEffect","axios","then","response","data","date","slice","apr","algo","sharpe","mdd","_jsxs","_Fragment","children","_jsx","CRow","CCol","WidgetsDropdown","CCard","className","CCardBody","sm","id","CChartLine","style","height","marginTop","labels","map","substring","datasets","label","backgroundColor","hexToRgba","getStyle","borderColor","pointHoverBackgroundColor","borderWidth","cum_ret","fill","options","maintainAspectRatio","plugins","legend","display","scales","x","grid","drawOnChartArea","y","ticks","beginAtZero","maxTicksLimit","stepSize","Math","ceil","max","elements","line","tension","point","radius","hitRadius","hoverRadius","hoverBorderWidth","CChart","type","position","_ref","lg","CWidgetStatsA","color","value","title","chart","pointBackgroundColor","drawBorder","min"],"sourceRoot":""}